{"ast":null,"code":"var _jsxFileName = \"/Users/jansofta/Documents/GitHub/decentralised-staking/challenge-1-decentralized-staking/packages/react-app/src/components/Contract/FunctionForm.jsx\",\n  _s = $RefreshSig$();\nimport { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  utils,\n  BigNumber\n} = require(\"ethers\");\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input !== null && input !== void 0 && input.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\nexport default function FunctionForm({\n  contractFunction,\n  functionInfo,\n  provider,\n  gasPrice,\n  triggerRefresh\n}) {\n  _s();\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n  const tx = Transactor(provider, gasPrice);\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n        placement: \"right\",\n        title: \"to bytes32\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          type: \"dashed\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: async () => {\n            if (utils.isHexString(form[key])) {\n              const formUpdate = {\n                ...form\n              };\n              formUpdate[key] = utils.parseBytes32String(form[key]);\n              setForm(formUpdate);\n            } else {\n              const formUpdate = {\n                ...form\n              };\n              formUpdate[key] = utils.formatBytes32String(form[key]);\n              setForm(formUpdate);\n            }\n          },\n          children: \"#\\uFE0F\\u20E3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this);\n    } else if (input.type === \"bytes\") {\n      buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n        placement: \"right\",\n        title: \"to hex\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          type: \"dashed\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: async () => {\n            if (utils.isHexString(form[key])) {\n              const formUpdate = {\n                ...form\n              };\n              formUpdate[key] = utils.toUtf8String(form[key]);\n              setForm(formUpdate);\n            } else {\n              const formUpdate = {\n                ...form\n              };\n              formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n              setForm(formUpdate);\n            }\n          },\n          children: \"#\\uFE0F\\u20E3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this);\n    } else if (input.type === \"uint256\") {\n      buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n        placement: \"right\",\n        title: \"* 10 ** 18\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          type: \"dashed\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: async () => {\n            const formUpdate = {\n              ...form\n            };\n            formUpdate[key] = utils.parseEther(form[key]);\n            setForm(formUpdate);\n          },\n          children: \"\\u2734\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this);\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n          placement: \"right\",\n          title: \"blockie\",\n          children: /*#__PURE__*/_jsxDEV(Blockies, {\n            seed: possibleAddress,\n            scale: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this);\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        size: \"large\",\n        placeholder: input.name ? input.type + \" \" + input.name : input.type,\n        autoComplete: \"off\",\n        value: form[key],\n        name: key,\n        onChange: event => {\n          const formUpdate = {\n            ...form\n          };\n          formUpdate[event.target.name] = event.target.value;\n          setForm(formUpdate);\n        },\n        suffix: buttons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  });\n  const txValueInput = /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      placeholder: \"transaction value\",\n      onChange: e => setTxValue(e.target.value),\n      value: txValue,\n      addonAfter: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            span: 16,\n            children: /*#__PURE__*/_jsxDEV(Tooltip, {\n              placement: \"right\",\n              title: \" * 10^18 \",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                type: \"dashed\",\n                style: {\n                  cursor: \"pointer\"\n                },\n                onClick: async () => {\n                  const floatValue = parseFloat(txValue);\n                  if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                },\n                children: \"\\u2733\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 16,\n            children: /*#__PURE__*/_jsxDEV(Tooltip, {\n              placement: \"right\",\n              title: \"number to hex\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                type: \"dashed\",\n                style: {\n                  cursor: \"pointer\"\n                },\n                onClick: async () => {\n                  setTxValue(BigNumber.from(txValue).toHexString());\n                },\n                children: \"#\\uFE0F\\u20E3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, \"txValueInput\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n  const buttonIcon = functionInfo.type === \"call\" ? /*#__PURE__*/_jsxDEV(Button, {\n    style: {\n      marginLeft: -32\n    },\n    children: \"Read\\uD83D\\uDCE1\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(Button, {\n    style: {\n      marginLeft: -32\n    },\n    children: \"Send\\uD83D\\uDCB8\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 7\n  }, this);\n  inputs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      cursor: \"pointer\",\n      margin: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      onChange: e => setReturnValue(e.target.value),\n      defaultValue: \"\",\n      bordered: false,\n      disabled: true,\n      value: returnValue,\n      suffix: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 50,\n          height: 30,\n          margin: 0\n        },\n        type: \"default\",\n        onClick: async () => {\n          const args = functionInfo.inputs.map((input, inputIndex) => {\n            const key = getFunctionInputKey(functionInfo, input, inputIndex);\n            let value = form[key];\n            if (input.baseType === \"array\") {\n              value = JSON.parse(value);\n            } else if (input.type === \"bool\") {\n              if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                value = 1;\n              } else {\n                value = 0;\n              }\n            }\n            return value;\n          });\n          let result;\n          if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n            try {\n              const returned = await contractFunction(...args);\n              result = tryToDisplay(returned);\n            } catch (err) {\n              console.error(err);\n            }\n          } else {\n            const overrides = {};\n            if (txValue) {\n              overrides.value = txValue; // ethers.utils.parseEther()\n            }\n\n            if (gasPrice) {\n              overrides.gasPrice = gasPrice;\n            }\n            // Uncomment this if you want to skip the gas estimation for each transaction\n            // overrides.gasLimit = hexlify(1200000);\n\n            // console.log(\"Running with extras\",extras)\n            const returned = await tx(contractFunction(...args, overrides));\n            result = tryToDisplay(returned);\n          }\n          console.log(\"SETTING RESULT:\", result);\n          setReturnValue(result);\n          triggerRefresh(true);\n        },\n        children: buttonIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)\n  }, \"goButton\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        span: 8,\n        style: {\n          textAlign: \"right\",\n          opacity: 0.333,\n          paddingRight: 6,\n          fontSize: 24\n        },\n        children: functionInfo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        span: 16,\n        children: inputs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n}\n_s(FunctionForm, \"b0jDw5H7XuKi4SNr9f+24uTw74I=\");\n_c = FunctionForm;\nvar _c;\n$RefreshReg$(_c, \"FunctionForm\");","map":{"version":3,"names":["Button","Col","Divider","Input","Row","Tooltip","React","useState","Blockies","Transactor","tryToDisplay","jsxDEV","_jsxDEV","utils","BigNumber","require","getFunctionInputKey","functionInfo","input","inputIndex","name","type","FunctionForm","contractFunction","provider","gasPrice","triggerRefresh","_s","form","setForm","txValue","setTxValue","returnValue","setReturnValue","tx","inputs","map","key","buttons","placement","title","children","style","cursor","onClick","isHexString","formUpdate","parseBytes32String","formatBytes32String","fileName","_jsxFileName","lineNumber","columnNumber","toUtf8String","hexlify","toUtf8Bytes","parseEther","possibleAddress","toLowerCase","trim","length","seed","scale","margin","size","placeholder","autoComplete","value","onChange","event","target","suffix","txValueInput","e","addonAfter","span","floatValue","parseFloat","from","toHexString","payable","push","buttonIcon","marginLeft","defaultValue","bordered","disabled","width","height","args","baseType","JSON","parse","result","stateMutability","returned","err","console","error","overrides","log","textAlign","opacity","paddingRight","fontSize","_c","$RefreshReg$"],"sources":["/Users/jansofta/Documents/GitHub/decentralised-staking/challenge-1-decentralized-staking/packages/react-app/src/components/Contract/FunctionForm.jsx"],"sourcesContent":["import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  result = tryToDisplay(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}