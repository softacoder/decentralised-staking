{"ast":null,"code":"var _jsxFileName = \"/Users/jansofta/Documents/GitHub/decentralised-staking/challenge-1-decentralized-staking/packages/react-app/src/components/AddressInput.jsx\",\n  _s = $RefreshSig$();\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\nimport { ethers } from \"ethers\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n  Displays an address input with QR scan option\n  ~ How can I use? ~\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n  ~ Features ~\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\nexport default function AddressInput(props) {\n  _s();\n  const {\n    ensProvider,\n    onChange\n  } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n  const updateAddress = useCallback(async newValue => {\n    if (typeof newValue !== \"undefined\") {\n      let address = newValue;\n      if (isENS(address)) {\n        try {\n          const possibleAddress = await ensProvider.resolveName(address);\n          if (possibleAddress) {\n            address = possibleAddress;\n          }\n          // eslint-disable-next-line no-empty\n        } catch (e) {}\n      }\n      setValue(address);\n      if (typeof onChange === \"function\") {\n        onChange(address);\n      }\n    }\n  }, [ensProvider, onChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [scan ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\"\n      },\n      onClick: () => {\n        setScan(false);\n      },\n      children: /*#__PURE__*/_jsxDEV(QrReader, {\n        delay: 250,\n        resolution: 1200,\n        onError: e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        },\n        onScan: newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        },\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(Input, {\n      id: \"0xAddress\" // name it something other than address for auto fill doxxing\n      ,\n      name: \"0xAddress\" // name it something other than address for auto fill doxxing\n      ,\n      autoComplete: \"off\",\n      autoFocus: props.autoFocus,\n      placeholder: props.placeholder ? props.placeholder : \"address\",\n      prefix: /*#__PURE__*/_jsxDEV(Blockie, {\n        address: currentValue,\n        size: 8,\n        scale: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this),\n      value: ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue,\n      addonAfter: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 4,\n          cursor: \"pointer\"\n        },\n        onClick: () => {\n          setScan(!scan);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Badge, {\n          count: /*#__PURE__*/_jsxDEV(CameraOutlined, {\n            style: {\n              fontSize: 9\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 27\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(QrcodeOutlined, {\n            style: {\n              fontSize: 18\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), \" \", \"Scan\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this),\n      onChange: e => {\n        updateAddress(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(AddressInput, \"+Y1/HWX+XHKssCkvQS70MSIqFjc=\", false, function () {\n  return [useLookupAddress];\n});\n_c = AddressInput;\nvar _c;\n$RefreshReg$(_c, \"AddressInput\");","map":{"version":3,"names":["CameraOutlined","QrcodeOutlined","Badge","Input","useLookupAddress","React","useCallback","useState","QrReader","Blockie","ethers","jsxDEV","_jsxDEV","isENS","address","endsWith","AddressInput","props","_s","ensProvider","onChange","value","setValue","scan","setScan","currentValue","ens","updateAddress","newValue","possibleAddress","resolveName","e","children","style","zIndex","position","left","top","width","onClick","delay","resolution","onError","console","log","onScan","possibleNewValue","indexOf","substr","lastIndexOf","fileName","_jsxFileName","lineNumber","columnNumber","id","name","autoComplete","autoFocus","placeholder","prefix","size","scale","utils","isAddress","addonAfter","marginTop","cursor","count","fontSize","target","_c","$RefreshReg$"],"sources":["/Users/jansofta/Documents/GitHub/decentralised-staking/challenge-1-decentralized-staking/packages/react-app/src/components/AddressInput.jsx"],"sourcesContent":["import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\nimport { ethers } from \"ethers\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n  Displays an address input with QR scan option\n  ~ How can I use? ~\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n  ~ Features ~\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n            Scan\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}