{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\n// Hook from useHooks! (https://usehooks.com/useLocalStorage/)\nexport default function useLocalStorage(key, initialValue, ttl) {\n  _s();\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      const parsedItem = item ? JSON.parse(item) : initialValue;\n      if (typeof parsedItem === \"object\" && parsedItem !== null && \"expiry\" in parsedItem && \"value\" in parsedItem) {\n        const now = new Date();\n        if (ttl && now.getTime() > parsedItem.expiry) {\n          // If the item is expired, delete the item from storage\n          // and return null\n          window.localStorage.removeItem(key);\n          return initialValue;\n        }\n        return parsedItem.value;\n      }\n      // Parse stored json or if none return initialValue\n      return parsedItem;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (ttl) {\n        const now = new Date();\n\n        // `item` is an object which contains the original value\n        // as well as the time when it's supposed to expire\n        const item = {\n          value: valueToStore,\n          expiry: now.getTime() + ttl\n        };\n        window.localStorage.setItem(key, JSON.stringify(item));\n      } else {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n_s(useLocalStorage, \"Rm9hdNGFHYBqBtorv7gdlhOL6zA=\");","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","ttl","_s","storedValue","setStoredValue","item","window","localStorage","getItem","parsedItem","JSON","parse","now","Date","getTime","expiry","removeItem","value","error","console","log","setValue","valueToStore","Function","setItem","stringify"],"sources":["/Users/jansofta/Documents/GitHub/decentralised-staking/challenge-1-decentralized-staking/packages/react-app/src/hooks/LocalStorage.js"],"sourcesContent":["import { useState } from \"react\";\n// Hook from useHooks! (https://usehooks.com/useLocalStorage/)\nexport default function useLocalStorage(key, initialValue, ttl) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      const parsedItem = item ? JSON.parse(item) : initialValue;\n\n      if (typeof parsedItem === \"object\" && parsedItem !== null && \"expiry\" in parsedItem && \"value\" in parsedItem) {\n        const now = new Date();\n        if (ttl && now.getTime() > parsedItem.expiry) {\n          // If the item is expired, delete the item from storage\n          // and return null\n          window.localStorage.removeItem(key);\n          return initialValue;\n        }\n        return parsedItem.value;\n      }\n      // Parse stored json or if none return initialValue\n      return parsedItem;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (ttl) {\n        const now = new Date();\n\n        // `item` is an object which contains the original value\n        // as well as the time when it's supposed to expire\n        const item = {\n          value: valueToStore,\n          expiry: now.getTime() + ttl,\n        };\n        window.localStorage.setItem(key, JSON.stringify(item));\n      } else {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC;AACA,eAAe,SAASC,eAAeA,CAACC,GAAG,EAAEC,YAAY,EAAEC,GAAG,EAAE;EAAAC,EAAA;EAC9D;EACA;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,MAAM;IACnD,IAAI;MACF;MACA,MAAMQ,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACT,GAAG,CAAC;MAC7C,MAAMU,UAAU,GAAGJ,IAAI,GAAGK,IAAI,CAACC,KAAK,CAACN,IAAI,CAAC,GAAGL,YAAY;MAEzD,IAAI,OAAOS,UAAU,KAAK,QAAQ,IAAIA,UAAU,KAAK,IAAI,IAAI,QAAQ,IAAIA,UAAU,IAAI,OAAO,IAAIA,UAAU,EAAE;QAC5G,MAAMG,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;QACtB,IAAIZ,GAAG,IAAIW,GAAG,CAACE,OAAO,CAAC,CAAC,GAAGL,UAAU,CAACM,MAAM,EAAE;UAC5C;UACA;UACAT,MAAM,CAACC,YAAY,CAACS,UAAU,CAACjB,GAAG,CAAC;UACnC,OAAOC,YAAY;QACrB;QACA,OAAOS,UAAU,CAACQ,KAAK;MACzB;MACA;MACA,OAAOR,UAAU;IACnB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,OAAOlB,YAAY;IACrB;EACF,CAAC,CAAC;;EAEF;EACA;EACA,MAAMqB,QAAQ,GAAGJ,KAAK,IAAI;IACxB,IAAI;MACF;MACA,MAAMK,YAAY,GAAGL,KAAK,YAAYM,QAAQ,GAAGN,KAAK,CAACd,WAAW,CAAC,GAAGc,KAAK;MAC3E;MACAb,cAAc,CAACkB,YAAY,CAAC;MAC5B;MACA,IAAIrB,GAAG,EAAE;QACP,MAAMW,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;;QAEtB;QACA;QACA,MAAMR,IAAI,GAAG;UACXY,KAAK,EAAEK,YAAY;UACnBP,MAAM,EAAEH,GAAG,CAACE,OAAO,CAAC,CAAC,GAAGb;QAC1B,CAAC;QACDK,MAAM,CAACC,YAAY,CAACiB,OAAO,CAACzB,GAAG,EAAEW,IAAI,CAACe,SAAS,CAACpB,IAAI,CAAC,CAAC;MACxD,CAAC,MAAM;QACLC,MAAM,CAACC,YAAY,CAACiB,OAAO,CAACzB,GAAG,EAAEW,IAAI,CAACe,SAAS,CAACH,YAAY,CAAC,CAAC;MAChE;IACF,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;EAED,OAAO,CAACf,WAAW,EAAEkB,QAAQ,CAAC;AAChC;AAACnB,EAAA,CAzDuBJ,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}