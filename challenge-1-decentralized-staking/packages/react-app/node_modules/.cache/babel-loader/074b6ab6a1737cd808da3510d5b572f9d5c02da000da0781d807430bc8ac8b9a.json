{"ast":null,"code":"import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\nconst {\n  ethers\n} = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\nconst DEBUG = true;\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n      console.log(\"network\", network);\n      let options = null;\n      let notify = null;\n      if (navigator.onLine) {\n        options = {\n          dappId: BLOCKNATIVE_DAPPID,\n          // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          }\n        };\n        notify = Notify(options);\n      }\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const {\n            emitter\n          } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash)\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\"\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({\n                  ...txResult,\n                  ...currentTransactionReceipt\n                });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message = e.data && e.data.message ? e.data.message : e.error && JSON.parse(JSON.stringify(e.error)).body ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message : e.data ? e.data : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n        notification.error({\n          message: \"Transaction Error\",\n          description: message\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n_c = Transactor;\nvar _c;\n$RefreshReg$(_c, \"Transactor\");","map":{"version":3,"names":["notification","Notify","BLOCKNATIVE_DAPPID","ethers","require","callbacks","DEBUG","Transactor","providerOrSigner","gasPrice","etherscan","tx","callback","signer","network","provider","Signer","isSigner","getNetwork","_isProvider","getSigner","console","log","options","notify","navigator","onLine","dappId","system","networkId","chainId","transactionHandler","txInformation","possibleFunction","transaction","hash","etherscanNetwork","name","etherscanTxUrl","result","Promise","utils","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","window","open","info","message","description","placement","txResult","listeningInterval","setInterval","currentTransactionReceipt","getTransactionReceipt","confirmations","clearInterval","wait","e","data","error","JSON","parse","stringify","body","obj","errorObj","_c","$RefreshReg$"],"sources":["/Users/jansofta/Documents/GitHub/decentralised-staking/challenge-1-decentralized-staking/packages/react-app/src/helpers/Transactor.js"],"sourcesContent":["import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n\n      let options = null;\n      let notify = null;\n      if (navigator.onLine) {\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };\n\n        notify = Notify(options);\n      }\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}