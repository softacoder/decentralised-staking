{"ast":null,"code":"var _jsxFileName = \"/Users/jansofta/Documents/GitHub/decentralised-staking/challenge-1-decentralized-staking/packages/react-app/src/components/Faucet.jsx\",\n  _s = $RefreshSig$();\nimport { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  utils\n} = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/**\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n**/\n\nexport default function Faucet(props) {\n  _s();\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n  const {\n    price,\n    placeholder,\n    localProvider,\n    ensProvider\n  } = props;\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = /*#__PURE__*/_jsxDEV(Blockies, {\n      seed: address.toLowerCase(),\n      size: 8,\n      scale: 4\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }, this);\n  } else {\n    blockie = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }, this);\n  }\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n  const tx = Transactor(localProvider);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      size: \"large\",\n      placeholder: placeholder ? placeholder : \"local faucet\",\n      prefix: blockie,\n      value: address,\n      onChange: e => updateAddress(e.target.value),\n      suffix: /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"Faucet: Send local ether to an address.\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            tx({\n              to: address,\n              value: utils.parseEther(\"1.5\")\n            });\n            setAddress(\"\");\n          },\n          shape: \"circle\",\n          icon: /*#__PURE__*/_jsxDEV(SendOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Wallet, {\n          color: \"#888888\",\n          provider: localProvider,\n          ensProvider: ensProvider,\n          price: price,\n          address: faucetAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(Faucet, \"+xruEZHsvd3TnqG43qbcrQdbPLk=\");\n_c = Faucet;\nvar _c;\n$RefreshReg$(_c, \"Faucet\");","map":{"version":3,"names":["Button","Input","Tooltip","React","useState","useEffect","Blockies","SendOutlined","Transactor","Wallet","jsxDEV","_jsxDEV","utils","require","Faucet","props","_s","address","setAddress","faucetAddress","setFaucetAddress","price","placeholder","localProvider","ensProvider","getFaucetAddress","_faucetAddress","listAccounts","blockie","toLowerCase","seed","size","scale","fileName","_jsxFileName","lineNumber","columnNumber","updateAddress","newValue","isAddress","tx","children","prefix","value","onChange","e","target","suffix","title","onClick","to","parseEther","shape","icon","color","provider","_c","$RefreshReg$"],"sources":["/Users/jansofta/Documents/GitHub/decentralised-staking/challenge-1-decentralized-staking/packages/react-app/src/components/Faucet.jsx"],"sourcesContent":["import { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/**\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n**/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"1.5\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}