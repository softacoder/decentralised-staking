{"ast":null,"code":"var _jsxFileName = \"/Users/jansofta/Documents/GitHub/decentralised-staking/challenge-1-decentralized-staking/packages/react-app/src/components/EtherInput.jsx\",\n  _s = $RefreshSig$();\nimport { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EtherInput(props) {\n  _s();\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const option = title => {\n    if (!props.price) return \"\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: () => {\n        if (mode === \"USD\") {\n          setMode(\"ETH\");\n          setDisplay(currentValue);\n        } else {\n          setMode(\"USD\");\n          if (currentValue) {\n            const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n            setDisplay(usdValue);\n          } else {\n            setDisplay(currentValue);\n          }\n        }\n      },\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  };\n  let prefix;\n  let addonAfter;\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD ðŸ”€\");\n  } else {\n    prefix = \"Îž\";\n    addonAfter = option(\"ETH ðŸ”€\");\n  }\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n  return /*#__PURE__*/_jsxDEV(Input, {\n    placeholder: props.placeholder ? props.placeholder : \"amount in \" + mode,\n    autoFocus: props.autoFocus,\n    prefix: prefix,\n    value: display,\n    addonAfter: addonAfter,\n    onChange: async e => {\n      const newValue = e.target.value;\n      if (mode === \"USD\") {\n        const possibleNewValue = parseFloat(newValue);\n        if (possibleNewValue) {\n          const ethValue = possibleNewValue / props.price;\n          setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(ethValue);\n          }\n          setDisplay(newValue);\n        } else {\n          setDisplay(newValue);\n        }\n      } else {\n        setValue(newValue);\n        if (typeof props.onChange === \"function\") {\n          props.onChange(newValue);\n        }\n        setDisplay(newValue);\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(EtherInput, \"Dj2TPI0Whn++ciBZophnuMQMQDE=\");\n_c = EtherInput;\nvar _c;\n$RefreshReg$(_c, \"EtherInput\");","map":{"version":3,"names":["Input","React","useEffect","useState","jsxDEV","_jsxDEV","EtherInput","props","_s","mode","setMode","price","display","setDisplay","value","setValue","currentValue","option","title","style","cursor","onClick","usdValue","parseFloat","toFixed","children","fileName","_jsxFileName","lineNumber","columnNumber","prefix","addonAfter","placeholder","autoFocus","onChange","e","newValue","target","possibleNewValue","ethValue","_c","$RefreshReg$"],"sources":["/Users/jansofta/Documents/GitHub/decentralised-staking/challenge-1-decentralized-staking/packages/react-app/src/components/EtherInput.jsx"],"sourcesContent":["import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"USD\") {\n            setMode(\"ETH\");\n            setDisplay(currentValue);\n          } else {\n            setMode(\"USD\");\n            if (currentValue) {\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n              setDisplay(usdValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let prefix;\n  let addonAfter;\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD ðŸ”€\");\n  } else {\n    prefix = \"Îž\";\n    addonAfter = option(\"ETH ðŸ”€\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={prefix}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}