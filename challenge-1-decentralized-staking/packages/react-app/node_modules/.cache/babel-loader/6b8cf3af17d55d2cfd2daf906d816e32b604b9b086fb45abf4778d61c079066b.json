{"ast":null,"code":"var _jsxFileName = \"/Users/jansofta/Documents/GitHub/decentralised-staking/challenge-1-decentralized-staking/packages/react-app/src/components/Balance.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  utils\n} = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  _s();\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n  let displayBalance = floatBalance.toFixed(4);\n  const price = props.price || props.dollarMultiplier;\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      verticalAlign: \"middle\",\n      fontSize: props.size ? props.size : 24,\n      padding: 8,\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      setDollarMode(!dollarMode);\n    },\n    children: displayBalance\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(Balance, \"n3fF3u+06hJT0xVWgXpH6RTuYUc=\", false, function () {\n  return [useBalance];\n});\n_c = Balance;\nvar _c;\n$RefreshReg$(_c, \"Balance\");","map":{"version":3,"names":["React","useState","useBalance","jsxDEV","_jsxDEV","utils","require","Balance","props","_s","dollarMode","setDollarMode","balance","provider","address","floatBalance","parseFloat","usingBalance","value","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","style","verticalAlign","fontSize","size","padding","cursor","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jansofta/Documents/GitHub/decentralised-staking/challenge-1-decentralized-staking/packages/react-app/src/components/Balance.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,UAAU,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAM;EAAEC;AAAM,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,OAAOA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACrC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAElD;;EAEA,MAAMW,OAAO,GAAGV,UAAU,CAACM,KAAK,CAACK,QAAQ,EAAEL,KAAK,CAACM,OAAO,CAAC;EAEzD,IAAIC,YAAY,GAAGC,UAAU,CAAC,MAAM,CAAC;EAErC,IAAIC,YAAY,GAAGL,OAAO;EAE1B,IAAI,OAAOJ,KAAK,CAACI,OAAO,KAAK,WAAW,EAAE;IACxCK,YAAY,GAAGT,KAAK,CAACI,OAAO;EAC9B;EACA,IAAI,OAAOJ,KAAK,CAACU,KAAK,KAAK,WAAW,EAAE;IACtCD,YAAY,GAAGT,KAAK,CAACU,KAAK;EAC5B;EAEA,IAAID,YAAY,EAAE;IAChB,MAAME,YAAY,GAAGd,KAAK,CAACe,WAAW,CAACH,YAAY,CAAC;IACpDD,UAAU,CAACG,YAAY,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC;IACnCN,YAAY,GAAGC,UAAU,CAACG,YAAY,CAAC;EACzC;EAEA,IAAIG,cAAc,GAAGP,YAAY,CAACM,OAAO,CAAC,CAAC,CAAC;EAE5C,MAAME,KAAK,GAAGf,KAAK,CAACe,KAAK,IAAIf,KAAK,CAACgB,gBAAgB;EAEnD,IAAID,KAAK,IAAIb,UAAU,EAAE;IACvBY,cAAc,GAAG,GAAG,GAAG,CAACP,YAAY,GAAGQ,KAAK,EAAEF,OAAO,CAAC,CAAC,CAAC;EAC1D;EAEA,oBACEjB,OAAA;IACEqB,KAAK,EAAE;MACLC,aAAa,EAAE,QAAQ;MACvBC,QAAQ,EAAEnB,KAAK,CAACoB,IAAI,GAAGpB,KAAK,CAACoB,IAAI,GAAG,EAAE;MACtCC,OAAO,EAAE,CAAC;MACVC,MAAM,EAAE;IACV,CAAE;IACFC,OAAO,EAAEA,CAAA,KAAM;MACbpB,aAAa,CAAC,CAACD,UAAU,CAAC;IAC5B,CAAE;IAAAsB,QAAA,EAEDV;EAAc;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEX;AAAC3B,EAAA,CA/CuBF,OAAO;EAAA,QAKbL,UAAU;AAAA;AAAAmC,EAAA,GALJ9B,OAAO;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}